# Nginx configuration for Video Encoder Platform

# Save as: /etc/nginx/sites-available/video-encoder

server {
listen 80;
server_name your-domain.com www.your-domain.com; # Replace with your domain

    # Redirect HTTP to HTTPS (uncomment after SSL setup)
    # return 301 https://$server_name$request_uri;

    # For initial setup without SSL, use the configuration below:

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private must-revalidate auth;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Client body size (for file uploads if needed in future)
    client_max_body_size 100M;

    # Proxy to the Python application
    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
    }

    # WebSocket support for real-time updates
    location /ws {
        proxy_pass http://127.0.0.1:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Static files (if any)
    location /static/ {
        alias /opt/video-encoder/app/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Health check endpoint
    location /health {
        access_log off;
        proxy_pass http://127.0.0.1:8000/api/status;
        proxy_set_header Host $host;
    }

    # Logging
    access_log /var/log/nginx/video-encoder.access.log;
    error_log /var/log/nginx/video-encoder.error.log;

}

# HTTPS configuration (uncomment after SSL certificate is obtained)

# server {

# listen 443 ssl http2;

# server_name your-domain.com www.your-domain.com;

#

# # SSL configuration (managed by certbot)

# ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;

# ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;

# include /etc/letsencrypt/options-ssl-nginx.conf;

# ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

#

# # Security headers

# add_header Strict-Transport-Security "max-age=63072000" always;

# add_header X-Frame-Options "SAMEORIGIN" always;

# add_header X-XSS-Protection "1; mode=block" always;

# add_header X-Content-Type-Options "nosniff" always;

# add_header Referrer-Policy "no-referrer-when-downgrade" always;

# add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

#

# # Rest of the configuration same as HTTP block above

# # ... (copy all location blocks from above)

# }
